local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Components = {}

-- Utility Functions
local function createRipple(parent, rippleColor)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = rippleColor or Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.Size = UDim2.new(0, 0, 0, 0)

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple

    ripple.Parent = parent

    local targetSize = UDim2.new(2, 0, 2, 0)
    TweenService:Create(ripple, TweenInfo.new(0.5), {
        Size = targetSize,
        BackgroundTransparency = 1
    }):Play()

    game:GetService("Debris"):AddItem(ripple, 0.5)
end

-- Advanced Components
function Components.createColorPicker(parent, default, callback)
    local picker = Instance.new("Frame")
    picker.Size = UDim2.new(1, 0, 0, 120)
    picker.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    picker.BorderSizePixel = 0

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = picker

    local preview = Instance.new("Frame")
    preview.Size = UDim2.new(0, 50, 0, 50)
    preview.Position = UDim2.new(0, 10, 0, 10)
    preview.BackgroundColor3 = default or Color3.fromRGB(255, 0, 0)
    preview.Parent = picker

    local previewCorner = Instance.new("UICorner")
    previewCorner.CornerRadius = UDim.new(0, 6)
    previewCorner.Parent = preview

    local function createSlider(name, defaultValue, color)
        local slider = Instance.new("Frame")
        slider.Name = name
        slider.Size = UDim2.new(0.6, 0, 0, 20)
        slider.Position = UDim2.new(0.35, 0, 0, 10 + (#picker:GetChildren() - 2) * 25)
        slider.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        slider.Parent = picker

        local sliderCorner = Instance.new("UICorner")
        sliderCorner.CornerRadius = UDim.new(0, 4)
        sliderCorner.Parent = slider

        local fill = Instance.new("Frame")
        fill.Size = UDim2.new(defaultValue/255, 0, 1, 0)
        fill.BackgroundColor3 = color
        fill.BorderSizePixel = 0
        fill.Parent = slider

        local fillCorner = Instance.new("UICorner")
        fillCorner.CornerRadius = UDim.new(0, 4)
        fillCorner.Parent = fill

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.3, 0, 1, 0)
        label.Position = UDim2.new(-0.35, 0, 0, 0)
        label.BackgroundTransparency = 1
        label.Text = name
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextSize = 14
        label.Parent = slider

        local value = Instance.new("TextBox")
        value.Size = UDim2.new(0, 40, 1, 0)
        value.Position = UDim2.new(1.1, 0, 0, 0)
        value.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        value.Text = tostring(defaultValue)
        value.TextColor3 = Color3.fromRGB(255, 255, 255)
        value.TextSize = 14
        value.Parent = slider

        local valueCorner = Instance.new("UICorner")
        valueCorner.CornerRadius = UDim.new(0, 4)
        valueCorner.Parent = value

        local dragging = false

        slider.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)

        slider.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local percentage = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
                local newValue = math.floor(percentage * 255)
                fill.Size = UDim2.new(percentage, 0, 1, 0)
                value.Text = tostring(newValue)
                return newValue
            end
        end)

        return slider
    end

    local rSlider = createSlider("R", default and math.floor(default.R * 255) or 255, Color3.fromRGB(255, 0, 0))
    local gSlider = createSlider("G", default and math.floor(default.G * 255) or 0, Color3.fromRGB(0, 255, 0))
    local bSlider = createSlider("B", default and math.floor(default.B * 255) or 0, Color3.fromRGB(0, 0, 255))

    local function updateColor()
        local r = tonumber(rSlider.TextBox.Text)
        local g = tonumber(gSlider.TextBox.Text)
        local b = tonumber(bSlider.TextBox.Text)
        local newColor = Color3.fromRGB(r, g, b)
        preview.BackgroundColor3 = newColor
        if callback then callback(newColor) end
    end

    rSlider.TextBox.FocusLost:Connect(updateColor)
    gSlider.TextBox.FocusLost:Connect(updateColor)
    bSlider.TextBox.FocusLost:Connect(updateColor)

    picker.Parent = parent
    return picker
end

function Components.createNotification(title, message, type)
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 300, 0, 80)
    notification.Position = UDim2.new(1, -320, 1, -100)
    notification.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    notification.BorderSizePixel = 0
    notification.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("StunningUI")

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = notification

    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, 30, 0, 30)
    icon.Position = UDim2.new(0, 10, 0, 10)
    icon.BackgroundTransparency = 1
    
    -- Set icon based on type
    if type == "success" then
        icon.Image = "rbxassetid://6031068433"
        icon.ImageColor3 = Color3.fromRGB(46, 204, 113)
    elseif type == "warning" then
        icon.Image = "rbxassetid://6031071053"
        icon.ImageColor3 = Color3.fromRGB(241, 196, 15)
    elseif type == "error" then
        icon.Image = "rbxassetid://6031071057"
        icon.ImageColor3 = Color3.fromRGB(231, 76, 60)
    else
        icon.Image = "rbxassetid://6031068426"
        icon.ImageColor3 = Color3.fromRGB(52, 152, 219)
    end
    
    icon.Parent = notification

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -60, 0, 30)
    titleLabel.Position = UDim2.new(0, 50, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = notification

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -20, 0, 30)
    messageLabel.Position = UDim2.new(0, 10, 0, 40)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.Parent = notification

    -- Animate in
    notification.Position = UDim2.new(1, 20, 1, -100)
    TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
        Position = UDim2.new(1, -320, 1, -100)
    }):Play()

    -- Animate out after 5 seconds
    delay(5, function()
        TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
            Position = UDim2.new(1, 20, 1, -100)
        }):Play()
        wait(0.5)
        notification:Destroy()
    end)

    return notification
end

function Components.createGraph(parent, data, options)
    options = options or {}
    local graph = Instance.new("Frame")
    graph.Size = UDim2.new(1, 0, 0, 200)
    graph.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    graph.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = graph

    local plotArea = Instance.new("Frame")
    plotArea.Size = UDim2.new(1, -60, 1, -40)
    plotArea.Position = UDim2.new(0, 50, 0, 10)
    plotArea.BackgroundTransparency = 1
    plotArea.Parent = graph

    -- Draw grid lines
    local function createGridLine(vertical)
        local line = Instance.new("Frame")
        line.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
        line.BorderSizePixel = 0
        if vertical then
            line.Size = UDim2.new(0, 1, 1, 0)
        else
            line.Size = UDim2.new(1, 0, 0, 1)
        end
        line.Parent = plotArea
        return line
    end

    -- Create grid
    for i = 0, 10 do
        local vertLine = createGridLine(true)
        vertLine.Position = UDim2.new(i/10, 0, 0, 0)
        
        local horizLine = createGridLine(false)
        horizLine.Position = UDim2.new(0, 0, i/10, 0)
    end

    -- Plot data
    local maxValue = math.max(unpack(data))
    local points = {}
    
    for i, value in ipairs(data) do
        local point = Instance.new("Frame")
        point.Size = UDim2.new(0, 8, 0, 8)
        point.AnchorPoint = Vector2.new(0.5, 0.5)
        point.Position = UDim2.new((i-1)/(#data-1), 0, 1 - value/maxValue, 0)
        point.BackgroundColor3 = options.pointColor or Color3.fromRGB(65, 105, 225)
        
        local pointCorner = Instance.new("UICorner")
        pointCorner.CornerRadius = UDim.new(1, 0)
        pointCorner.Parent = point
        
        point.Parent = plotArea
        table.insert(points, point)
        
        -- Create line to next point if not last point
        if i < #data then
            local line = Instance.new("Frame")
            line.Name = "Line"
            line.BackgroundColor3 = options.lineColor or Color3.fromRGB(65, 105, 225)
            line.BorderSizePixel = 0
            line.Parent = plotArea
            
            -- Calculate line position and size
            local nextValue = data[i + 1]
            local currentPos = point.Position
            local nextPos = UDim2.new(i/(#data-1), 0, 1 - nextValue/maxValue, 0)
            
            -- Calculate distance and angle between points
            local deltaX = (nextPos.X.Scale - currentPos.X.Scale) * plotArea.AbsoluteSize.X
            local deltaY = (nextPos.Y.Scale - currentPos.Y.Scale) * plotArea.AbsoluteSize.Y
            local distance = math.sqrt(deltaX^2 + deltaY^2)
            local angle = math.atan2(deltaY, deltaX)
            
            line.Size = UDim2.new(0, distance, 0, 2)
            line.Position = currentPos
            line.Rotation = math.deg(angle)
        end
    end

    graph.Parent = parent
    return graph
end

function Components.createContextMenu(items)
    local menu = Instance.new("Frame")
    menu.Size = UDim2.new(0, 200, 0, #items * 30 + (#items - 1) * 5)
    menu.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    menu.BorderSizePixel = 0
    menu.Visible = false
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = menu
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = menu
    
    for _, item in ipairs(items) do
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, -10, 0, 30)
        button.Position = UDim2.new(0, 5, 0, 5)
        button.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
        button.Text = item.text
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 14
        button.Font = Enum.Font.Gotham
        button.AutoButtonColor = false
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = button
        
        button.MouseButton1Click:Connect(function()
            if item.callback then item.callback() end
            menu.Visible = false
        end)
        
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            }):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(50, 50, 55)
            }):Play()
        end)
        
        button.Parent = menu
    end
    
    menu.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("StunningUI")
    
    -- Hide menu when clicking outside
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            if not menu.Visible then return end
            
            local menuPos = menu.AbsolutePosition
            local menuSize = menu.AbsoluteSize
            
            if mousePos.X < menuPos.X or mousePos.X > menuPos.X + menuSize.X or
               mousePos.Y < menuPos.Y or mousePos.Y > menuPos.Y + menuSize.Y then
                menu.Visible = false
            end
        end
    end)
    
    return menu
end

function Components.createTooltip(text)
    local tooltip = Instance.new("Frame")
    tooltip.Size = UDim2.new(0, 200, 0, 30)
    tooltip.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    tooltip.BorderSizePixel = 0
    tooltip.Visible = false
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = tooltip
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 1, 0)
    label.Position = UDim2.new(0, 5, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextWrapped = true
    label.Parent = tooltip
    
    tooltip.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("StunningUI")
    
    -- Update tooltip position with mouse
    RunService.RenderStepped:Connect(function()
        if tooltip.Visible then
            local mousePos = UserInputService:GetMouseLocation()
            tooltip.Position = UDim2.new(0, mousePos.X + 15, 0, mousePos.Y + 15)
        end
    end)
    
    return tooltip
end

return Components 
